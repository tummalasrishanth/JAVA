1. class Parent {
    void even() {
        System.out.println("Parent: Even numbers from 1 to 20:");
        for (int i = 1; i <= 20; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }
    void odd() {
        System.out.println("Parent: Odd numbers from 1 to 20:");
        for (int i = 1; i <= 20; i++) {
            if (i % 2 != 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }
    void prime() {
        System.out.println("Parent: Prime numbers from 1 to 20:");
        for (int i = 1; i <= 20; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }
    boolean isPrime(int num) {

2. class MyClass {
    int a;
    int b;
    MyClass() {
        a = 10;
        b = 15;
        System.out.println("Default constructor called");
    }
    MyClass(int x, int y) {
        a = x;
        b = y;
        System.out.println("Parameterized constructor called");
    }
    void disp() {
        System.out.println("a = " + a);
        System.out.println("b = " + b);
    }
}
public class Main {
    public static void main(String[] args) {
        MyClass obj1 = new MyClass();
        obj1.disp();
        MyClass obj2 = new MyClass(20, 25);
        obj2.disp();
    }
}

3. class Base {
    void area(int a, int b) {
        System.out.println("Area of square: " + a * a);
    }
}
class Derived extends Base {
    @Override
    void area(int a, int b) {
        System.out.println("Area of rectangle: " + a * b);
    }
}
public class Main {
    public static void main(String[] args) {
        Base base = new Base();
        base.area(5, 5); 
        Derived derived = new Derived();
        derived.area(4, 6); 
    }
}

4. public class MethodOverloading {
    int sum(int a, int b) {
        return a + b;
    }
    int sum(int a, int b, int c) {
        return a + b + c;
    }
    int sum(int a) {
        return a;
    }
    double sum(double a, double b) {
        return a + b;
    }
    String sum(String a, String b) {
        return a + b;
    }
    public static void main(String[] args) {
        MethodOverloading obj = new MethodOverloading();

        System.out.println("sum(2, 3) = " + obj.sum(2, 3)); 
        System.out.println("sum(2, 3, 4) = " + obj.sum(2, 3, 4)); 
        System.out.println("sum(5) = " + obj.sum(5)); 
        System.out.println("sum(2.5, 3.5) = " + obj.sum(2.5, 3.5)); 
        System.out.println("sum(\"Hello\", \"World\") = " + obj.sum("Hello", "World"));
    }
}

5. interface Tree {
    void fruits(String fruit1, String fruit2);
    void leaves(String leaf1, String leaf2, String leaf3);
    void flowers(String flower1, String flower2, String flower3, String flower4);
}
class Branch1 implements Tree {
    @Override
    public void fruits(String fruit1, String fruit2) {
        System.out.println("Branch1 has " + fruit1 + " and " + fruit2 + " fruits.");
    }
    @Override
    public void leaves(String leaf1, String leaf2, String leaf3) {
        System.out.println("Branch1 has " + leaf1 + ", " + leaf2 + ", and " + leaf3 + " leaves.");
    }
    @Override
    public void flowers(String flower1, String flower2, String flower3, String flower4) {
        System.out.println("Branch1 has " + flower1 + ", " + flower2 + ", " + flower3 + ", and " + flower4 + " flowers.");
    }
}
class Branch2 implements Tree {
    @Override
    public void fruits(String fruit1, String fruit2) {
        System.out.println("Branch2 has " + fruit1 + " and " + fruit2 + " fruits.");
    }
    @Override
    public void leaves(String leaf1, String leaf2, String leaf3) {
        System.out.println("Branch2 has " + leaf1 + ", " + leaf2 + ", and " + leaf3 + " leaves.");
    }
    @Override
    public void flowers(String flower1, String flower2, String flower3, String flower4) {
        System.out.println("Branch2 has " + flower1 + ", " + flower2 + ", " + flower3 + ", and " + flower4 + " flowers.");
    }
}
public class Main {
    public static void main(String[] args) {
        Branch1 branch1 = new Branch1();
        branch1.fruits("Apple", "Banana");
        branch1.leaves("Green", "Red", "Yellow");
        branch1.flowers("Rose", "Lily", "Sunflower", "Daisy");

        Branch2 branch2 = new Branch2();
        branch2.fruits("Mango", "Orange");
        branch2.leaves("Blue", "Purple", "Pink");
        branch2.flowers("Tulip", "Violet", "Poppy", "Lavender");
    }
}
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}
class Child extends Parent {
    @Override
    void even() {
        System.out.println("Child: Even numbers from 1 to 30:");
        for (int i = 1; i <= 30; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }
    @Override
    void odd() {
        System.out.println("Child: Odd numbers from 1 to 30:");
        for (int i = 1; i <= 30; i++) {
            if (i % 2 != 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }
    @Override
    void prime() {
        System.out.println("Child: Prime numbers from 1 to 30:");
        for (int i = 1; i <= 30; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }
}
public class Main {
    public static void main(String[] args) {
        Child child = new Child();
        child.even();
        child.odd();
        child.prime();
    }
}
